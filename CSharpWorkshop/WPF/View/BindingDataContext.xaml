<Window x:Class="WPF.View.BindingDataContext"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WPF.View"
        xmlns:model="clr-namespace:WPF.Model"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        mc:Ignorable="d"
        Title="BindingDataContext" Height="450" Width="800">
    <StackPanel>
        <!--DataContext属性被定义在FrameworkElement类里，这个类是WPF控件的基类，这意味着所有WPF控件（包括容器控件）都具备这个属性。如前所述，WPF的UI布局是树形结构，这棵树的每个结点都是控件，
        由此我们推出另一个结论一一在UI元素树的每个结点都有DataContext。.这一点非常重要，因为当一个Binding只知道自己的Path而不知道自己的Soruce时，它会沿着UI元素树一路向树的根部找过去，
        每路过一个结点就要看看这个结点的DataContext是否具有Path所指定的属性。如果有，那就把这个对象作为自己的Source;如果没有，那就继续找下去；如果到了树的根部还没有我到，那这个Binding就没有Source,因而也不会得到数据。-->
        <StackPanel.DataContext>
            <!--<model:Student Id="6" Name="Tom" Age="30"/>-->
            <sys:String>
                Hello DataContext
            </sys:String>
        </StackPanel.DataContext>
        <Grid>
            <StackPanel>
                <!--<TextBox Text="{Binding Path=Id}" Margin="5"/>
                <TextBox Text="{Binding Path=Name}" Margin="5"/>
                <TextBox Text="{Binding Path=Age}" Margin="5"/>-->

                <!--当Binding的Source本身就是数据、不需要使用属性来暴露数据时，Binding的Path可以设置为“.”,亦可以不写-->
                <TextBlock Text="{Binding}" Margin="5"/>
                <TextBlock Text="{Binding}" Margin="5"/>
                <TextBlock Text="{Binding}" Margin="5"/>
                <!--DataContext是一个“依赖属性”，依赖
                    属性有一个很重要的特点就是当你没有为控件的某个依赖属性显式赋值时，控件会把自已容器的属
                    值“借过来”当作自己的属性值。实际上是属性值沿着UI元素树向下传递了。-->
                <Button x:Name="btn" Content="OK" Click="btn_Click"/>
            </StackPanel>
        </Grid>
    </StackPanel>
</Window>
